name: "Snowflake DevOps Workflow"

on:
  push:
    branches:
      - '*'
      - '!develop'
      - '!main'
  pull_request:
    branches:
      - develop
      - main
    paths:
      - 'terraform/**'
      - 'migrations/**'

jobs:
  snowflake-devops-job:
    name: "Snowflake DevOps Job"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Determine Environment
        id: env
        run: |
          echo "EVENT_NAME=${{ github.event_name }}"
          echo "REF=${{ github.ref }}"
          echo "BASE_REF=${{ github.base_ref }}"
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" != "refs/heads/develop" && "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "NAME=dev" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.base_ref }}" == "refs/heads/develop" ]]; then
            echo "NAME=test" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.base_ref }}" == "refs/heads/main" ]]; then
            echo "NAME=prod" >> $GITHUB_ENV
          else
            echo "NAME=unknown" >> $GITHUB_ENV
          fi

          
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ./terraform

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
        working-directory: ./terraform

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context, getOctokit } = require('@actions/github');
            const githubToken = process.env.GITHUB_TOKEN;
            const octokit = getOctokit(githubToken);
            
            const planOutput = process.env.PLAN;
            const pr = context.payload.pull_request;
            
            if (!pr) {
              throw new Error("Could not find PR context.");
            }
      
            await octokit.rest.issues.createComment({
              ...context.repo,
              issue_number: pr.number,
              body: `### Terraform Plan Output\n\`\`\`terraform\n${planOutput}\n\`\`\``
            });
      

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Setup Python
        uses: actions/setup-python@v2.2.1
        with:
          python-version: 3.8.x

      - name: Debug Environment
        run: echo "ENVIRONMENT=${{ env.NAME }}"

      - name: Run schemachange
        env:
          SF_ACCOUNT: ${{ secrets[env.NAME == 'dev' && 'SF_ACCOUNT' || env.NAME == 'test' && 'SF_ACCOUNT' || env.NAME == 'prod' && 'SF_ACCOUNT'] }}
          SF_USERNAME: ${{ secrets[env.NAME == 'dev' && 'SF_USERNAME' || env.NAME == 'test' && 'SF_USERNAME' || env.NAME == 'prod' && 'SF_USERNAME'] }}
          SF_ROLE: ${{ secrets.SF_ROLE }}
          SF_WAREHOUSE: ${{ secrets[env.NAME == 'dev' && 'SF_WAREHOUSE' || env.NAME == 'test' && 'SF_WAREHOUSE' || env.NAME == 'prod' && 'SF_WAREHOUSE'] }}
          SF_DATABASE: ${{ secrets[env.NAME == 'dev' && 'DEV_SF_DATABASE' || env.NAME == 'test' && 'TEST_SF_DATABASE' || env.NAME == 'prod' && 'PROD_SF_DATABASE'] }}
          SNOWFLAKE_PASSWORD: ${{ secrets[env.NAME == 'dev' && 'SF_PASSWORD' || env.NAME == 'test' && 'SF_PASSWORD' || env.NAME == 'prod' && 'SF_PASSWORD'] }}
        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          python --version
          echo "Step 1: Installing schemachange"
          pip install schemachange
          echo "DEBUG: SF_ACCOUNT=${{ secrets[env.NAME == 'dev' && 'SF_ACCOUNT' || env.NAME == 'test' && 'SF_ACCOUNT' || env.NAME == 'prod' && 'SF_ACCOUNT'] }}"
          echo "DEBUG: SF_USERNAME=${{ secrets[env.NAME == 'dev' && 'SF_USERNAME' || env.NAME == 'test' && 'SF_USERNAME' || env.NAME == 'prod' && 'SF_USERNAME'] }}"
          echo "DEBUG: SF_WAREHOUSE=${{ secrets[env.NAME == 'dev' && 'SF_WAREHOUSE' || env.NAME == 'test' && 'SF_WAREHOUSE' || env.NAME == 'prod' && 'SF_WAREHOUSE'] }}"
          echo "DEBUG: SF_DATABASE=${{ secrets[env.NAME == 'dev' && 'DEV_SF_DATABASE' || env.NAME == 'test' && 'TEST_SF_DATABASE' || env.NAME == 'prod' && 'PROD_SF_DATABASE'] }}"
          echo "DEBUG: SNOWFLAKE_PASSWORD=${{ secrets[env.NAME == 'dev' && 'SF_PASSWORD' || env.NAME == 'test' && 'SF_PASSWORD' || env.NAME == 'prod' && 'SF_PASSWORD'] }}"
          echo "Step 2: Running schemachange for ${{ env.NAME }}"
          schemachange -f $GITHUB_WORKSPACE/migrations -a $SF_ACCOUNT -u $SF_USERNAME -r $SF_ROLE -w $SF_WAREHOUSE -d $SF_DATABASE -c $SF_DATABASE.SCHEMACHANGE.CHANGE_HISTORY --create-change-history-table
